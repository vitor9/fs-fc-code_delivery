Subindo os containers na ordem certa:
Simulator:
sobe primeiro os containers do Kafka em:
/simulator/.docker/kafka
docker-compose up

Depois o simulador em:
/simulador/
docker-compose up

Se for a primeira vez rodando o nest-api, executar o comando:
sudo rm -rf .docker/dbdata
Depois:
docker-compose up


Agora, para subirmos nosso front, temos de inicializar o docker na pasta do projeto:
cd /fs-fc-code_delivery/react-frontend
docker-compose up

Na pasta /simulator/
Entramos no nosso container que ira rodar o simulador:
docker-compose exec app bash
Rodamos o comando dentro do App
go run main.go

Queremos ouvir as msg do simulator msg no topico newposition

Utilizamos o decorator abaixo para ele ler o topico do Kafka. Ele tambem eh um padrao de leitura para outras mensagerias, como o RabbitMQ
@MessagePattern()

NAO SE ESQUECA DE QUE O ARQUIVO .ENV TEM QUE ESTAR COM SEU NOME CORRETO! VERIFIQUE SE ELE ESTA PRESENTE NA MESMA PASTA QUE CLASSE MAIN.GO E NAO ESTA NOMEADO COMO O .ENV.EXAMPLE

Opcionais:
Vamos rodar nosso simulador da seguinte maneira:

Segundo terminal producer:
Na pasta /simulator/
Entramos no container do nosso kafka:
docker exec -it kafka_kafka_1 bash
Rodamos o seguinte comando
kafka-console-producer --bootstrap-server=localhost:9092 --topic=route.new-direction

Terceiro terminal consumer:
Na pasta /simulator/
Entramos no container do nosso kafka:
docker exec -it kafka_kafka_1 bash
Rodamos o seguinte comando
kafka-console-consumer --bootstrap-server=localhost:9092 --topic=route.new-position --group=terminal

Rodamos qualquer uma das entradas abaixo no terminal do producer:
{"clientId":"1","routeId":"1"}
{"clientId":"2","routeId":"2"}
{"clientId":"3","routeId":"3"}

OU
Podemos rodar o seguinte request:
GET http://localhost:3000/routes/1/start
